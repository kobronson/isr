   // Port Input and Output

#define GYRO         IN_1
#define ACCEL        IN_4 
#define LEFT_MOTOR   OUT_C
#define RIGHT_MOTOR  OUT_A
#define MOTORS       OUT_AC


/*! Szybkoœæ obrotu silników */
#define GYRO_OFFSET 18
#define GYRO_THRESHOLD 5
#define X_OFFSET 18
#define X_THRESHOLD 5

/* bump threshold for single readings
 * if single reading is high, someone probably hit the robot */
#define G_BUMP_THRESHOLD 10
#define X_BUMP_THRESHOLD 20

#define SPEED 50
#define CONTROL_WAIT 25

#define TAB_LEN 2
int sumX=0;
int sumY=0;
int sumZ=-200*TAB_LEN;
int sumG=GYRO_OFFSET*TAB_LEN;

int tabNum=0;
int tabX[TAB_LEN];
int tabY[TAB_LEN];
int tabZ[TAB_LEN];
int tabG[TAB_LEN];

/*
int readings(int var,int tab[],int &sum,bool update)
{
		
	sum=sum - tab[tabNum]+var;
	tab[tabNum]=var;
	if(update) tabNum=(tabNum+1)%TAB_LEN;
		
	return sum/TAB_LEN;
}
*/
int readings(int var,int tab[],int &sum,bool update)
{
	int i;
	sum=0;
	for(i=0;i<TAB_LEN-2;i++)
	{
		tab[i]=tab[i+1];
	}
	tab[TAB_LEN-1]=var;
	for(i=0;i<TAB_LEN;i++)
	{
		sum=sum+tab[i];
	}
	return sum/TAB_LEN;
}

void resetAccelReadings()
{
	int i;
	sumX=0;
	sumY=0;
	sumZ=-200*TAB_LEN;
	for(i=0;i<TAB_LEN;i++)
	{
		tabX[i]=0;
		tabY[i]=0;
		tabZ[i]=-200;
	}
}

task main(){
	int i;
	/* Uruchamiamy czujniki */
	SetSensorHTGyro(GYRO);
	SetSensorLowspeed(ACCEL);
	ArrayInit(tabX,0,TAB_LEN);
	ArrayInit(tabY,0,TAB_LEN);
	ArrayInit(tabZ,-200,TAB_LEN);
	ArrayInit(tabG,10,TAB_LEN);
	
	for(i=0;i<TAB_LEN;i++)
	{
		tabX[i]=0;
		tabY[i]=0;
		tabZ[i]=-200;
		tabG[i]=GYRO_OFFSET;
	}
}

task stoj(){
	Follows(main);
	int x,y,z,gyro;
	int X,Y,Z,G;
	int v;
	/*while(true)
		OnRev(MOTORS, SPEED);*/
 
	while(true){

		ReadSensorHTAccel(ACCEL, z, y, x);
		gyro = SensorHTGyro(GYRO); 
		X=readings(x,tabX,sumX,false);
		Y=readings(y,tabY,sumY,false);
		Z=readings(z,tabZ,sumZ,false);
		G=readings(gyro,tabG,sumG,true);
		

if( X < -X_THRESHOLD)
		{
			
			if( X < -20)
				OnRev(MOTORS, 85);
			else if( X < -15)
				OnRev(MOTORS, 65);
			else if( X < -10)
				OnRev(MOTORS, 45);
			else
				if(G <  15) OnRev(MOTORS, 25);
			//Wait(80);
			//Off(MOTORS);
			//Wait(50);
		}
		else
		if( X >  X_THRESHOLD)
		{
			if( X > 20)
				OnFwd(MOTORS, 85);
			else if( X > 15)
				OnFwd(MOTORS, 65);
			else if( X > 10)
				OnFwd(MOTORS, 45);
			else
				if(G >  15)OnFwd(MOTORS, 25);
			//Wait(80);
			//Off(MOTORS);
			//Wait(50);
		}
/*
		if( (G < GYRO_OFFSET - GYRO_THRESHOLD))// || X > X_THRESHOLD + X_OFFSET))
		{
			OnRev(MOTORS, SPEED);
			Wait(200);
			Off(MOTORS);
			Wait(50);
			resetAccelReadings();
		}
		else 
		if( (G > GYRO_OFFSET + GYRO_THRESHOLD))// || X < - X_THRESHOLD + X_OFFSET))
		{
			OnFwd(MOTORS, SPEED);
			Wait(200);
			Off(MOTORS);
			Wait(50);
			resetAccelReadings();
		}
*/
/*
if( (G < GYRO_OFFSET - GYRO_THRESHOLD || X > X_THRESHOLD + X_OFFSET)
		|| (tabX[tabNum] > X_BUMP_THRESHOLD)
		|| (tabG[tabNum] > -G_BUMP_THRESHOLD) )
		{
			OnRev(MOTORS, SPEED);
			while(G < GYRO_OFFSET )//- GYRO_THRESHOLD)
			{
				gyro = SensorHTGyro(GYRO); 
				G=readings(gyro,tabG,sumG,true);
			}
			Off(MOTORS);
			resetAccelReadings();
		}
		else 
		if( (G > GYRO_OFFSET + GYRO_THRESHOLD || X < - X_THRESHOLD + X_OFFSET)
		|| (tabX[tabNum] < -X_BUMP_THRESHOLD)
		|| (tabG[tabNum] < -G_BUMP_THRESHOLD) )
		{
			OnFwd(MOTORS, SPEED);
			while(G > GYRO_OFFSET )//+ GYRO_THRESHOLD)
			{
				gyro = SensorHTGyro(GYRO); 
				G=readings(gyro,tabG,sumG,true);
			}
			Off(MOTORS);
			resetAccelReadings();
		}*/

	}
}
